/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.2.0 (NJsonSchema v10.3.4.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { BaseClient } from "./baseClient";

export class AppClient extends BaseClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * @param playlist (optional) 
     * @return Success
     */
    fromFile(playlist: FileParameter | null | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/playlist/from-file";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (playlist !== null && playlist !== undefined)
            content_.append("playlist", playlist.data, playlist.fileName ? playlist.fileName : "playlist");

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processFromFile(_response);
        });
    }

    protected processFromFile(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    fromChannels(body: IptvChannel[] | null | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/playlist/from-channels";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processFromChannels(_response);
        });
    }

    protected processFromChannels(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * @param fillData (optional) 
     * @param playlist (optional) 
     * @return Success
     */
    preview(fillData: boolean | undefined, playlist: FileParameter | null | undefined): Promise<IptvChannelExtendedListAjaxResponse> {
        let url_ = this.baseUrl + "/api/playlist/preview?";
        if (fillData === null)
            throw new Error("The parameter 'fillData' cannot be null.");
        else if (fillData !== undefined)
            url_ += "fillData=" + encodeURIComponent("" + fillData) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (playlist !== null && playlist !== undefined)
            content_.append("playlist", playlist.data, playlist.fileName ? playlist.fileName : "playlist");

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processPreview(_response);
        });
    }

    protected processPreview(response: Response): Promise<IptvChannelExtendedListAjaxResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IptvChannelExtendedListAjaxResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<IptvChannelExtendedListAjaxResponse>(<any>null);
    }

    /**
     * @param source (optional) 
     * @param fillData (optional) 
     * @return Success
     */
    fromSource(source: string | null | undefined, fillData: boolean | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/epg/from-source?";
        if (source !== undefined && source !== null)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (fillData === null)
            throw new Error("The parameter 'fillData' cannot be null.");
        else if (fillData !== undefined)
            url_ += "fillData=" + encodeURIComponent("" + fillData) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processFromSource(_response);
        });
    }

    protected processFromSource(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * @param source (optional) 
     * @param fillData (optional) 
     * @return Success
     */
    preview2(source: string | null | undefined, fillData: boolean | undefined): Promise<EpgChannelExtendedListAjaxResponse> {
        let url_ = this.baseUrl + "/api/epg/preview?";
        if (source !== undefined && source !== null)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (fillData === null)
            throw new Error("The parameter 'fillData' cannot be null.");
        else if (fillData !== undefined)
            url_ += "fillData=" + encodeURIComponent("" + fillData) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processPreview2(_response);
        });
    }

    protected processPreview2(response: Response): Promise<EpgChannelExtendedListAjaxResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EpgChannelExtendedListAjaxResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EpgChannelExtendedListAjaxResponse>(<any>null);
    }
}

export class IptvChannel implements IIptvChannel {
    name?: string | undefined;
    id?: number | undefined;
    epgId?: string | undefined;
    group?: string | undefined;
    logo?: string | undefined;
    extInf?: string | undefined;
    uri?: string | undefined;

    constructor(data?: IIptvChannel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.id = _data["id"];
            this.epgId = _data["epgId"];
            this.group = _data["group"];
            this.logo = _data["logo"];
            this.extInf = _data["extInf"];
            this.uri = _data["uri"];
        }
    }

    static fromJS(data: any): IptvChannel {
        data = typeof data === 'object' ? data : {};
        let result = new IptvChannel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        data["epgId"] = this.epgId;
        data["group"] = this.group;
        data["logo"] = this.logo;
        data["extInf"] = this.extInf;
        data["uri"] = this.uri;
        return data; 
    }
}

export interface IIptvChannel {
    name?: string | undefined;
    id?: number | undefined;
    epgId?: string | undefined;
    group?: string | undefined;
    logo?: string | undefined;
    extInf?: string | undefined;
    uri?: string | undefined;
}

/** 0 = Success 1 = Warning 2 = Error */
export enum AjaxResponseTypeEnum {
    Success = 0,
    Warning = 1,
    Error = 2,
}

export class IptvChannelExtended implements IIptvChannelExtended {
    name?: string | undefined;
    id?: number | undefined;
    epgId?: string | undefined;
    group?: string | undefined;
    logo?: string | undefined;
    extInf?: string | undefined;
    uri?: string | undefined;
    shouldCollect?: boolean;
    recognized?: boolean;
    pattern?: string | undefined;
    country?: string | undefined;
    readonly hd?: boolean;

    constructor(data?: IIptvChannelExtended) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.id = _data["id"];
            this.epgId = _data["epgId"];
            this.group = _data["group"];
            this.logo = _data["logo"];
            this.extInf = _data["extInf"];
            this.uri = _data["uri"];
            this.shouldCollect = _data["shouldCollect"];
            this.recognized = _data["recognized"];
            this.pattern = _data["pattern"];
            this.country = _data["country"];
            (<any>this).hd = _data["hd"];
        }
    }

    static fromJS(data: any): IptvChannelExtended {
        data = typeof data === 'object' ? data : {};
        let result = new IptvChannelExtended();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        data["epgId"] = this.epgId;
        data["group"] = this.group;
        data["logo"] = this.logo;
        data["extInf"] = this.extInf;
        data["uri"] = this.uri;
        data["shouldCollect"] = this.shouldCollect;
        data["recognized"] = this.recognized;
        data["pattern"] = this.pattern;
        data["country"] = this.country;
        data["hd"] = this.hd;
        return data; 
    }
}

export interface IIptvChannelExtended {
    name?: string | undefined;
    id?: number | undefined;
    epgId?: string | undefined;
    group?: string | undefined;
    logo?: string | undefined;
    extInf?: string | undefined;
    uri?: string | undefined;
    shouldCollect?: boolean;
    recognized?: boolean;
    pattern?: string | undefined;
    country?: string | undefined;
    hd?: boolean;
}

export class IptvChannelExtendedListAjaxResponse implements IIptvChannelExtendedListAjaxResponse {
    resultType?: AjaxResponseTypeEnum;
    errorMessage?: string | undefined;
    data?: IptvChannelExtended[] | undefined;

    constructor(data?: IIptvChannelExtendedListAjaxResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.resultType = _data["resultType"];
            this.errorMessage = _data["errorMessage"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(IptvChannelExtended.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IptvChannelExtendedListAjaxResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IptvChannelExtendedListAjaxResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["resultType"] = this.resultType;
        data["errorMessage"] = this.errorMessage;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IIptvChannelExtendedListAjaxResponse {
    resultType?: AjaxResponseTypeEnum;
    errorMessage?: string | undefined;
    data?: IptvChannelExtended[] | undefined;
}

export class EpgChannelExtended implements IEpgChannelExtended {
    name?: string | undefined;
    logo?: string | undefined;
    url?: string | undefined;
    channelId?: number | undefined;

    constructor(data?: IEpgChannelExtended) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.logo = _data["logo"];
            this.url = _data["url"];
            this.channelId = _data["channelId"];
        }
    }

    static fromJS(data: any): EpgChannelExtended {
        data = typeof data === 'object' ? data : {};
        let result = new EpgChannelExtended();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["logo"] = this.logo;
        data["url"] = this.url;
        data["channelId"] = this.channelId;
        return data; 
    }
}

export interface IEpgChannelExtended {
    name?: string | undefined;
    logo?: string | undefined;
    url?: string | undefined;
    channelId?: number | undefined;
}

export class EpgChannelExtendedListAjaxResponse implements IEpgChannelExtendedListAjaxResponse {
    resultType?: AjaxResponseTypeEnum;
    errorMessage?: string | undefined;
    data?: EpgChannelExtended[] | undefined;

    constructor(data?: IEpgChannelExtendedListAjaxResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.resultType = _data["resultType"];
            this.errorMessage = _data["errorMessage"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(EpgChannelExtended.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EpgChannelExtendedListAjaxResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EpgChannelExtendedListAjaxResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["resultType"] = this.resultType;
        data["errorMessage"] = this.errorMessage;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IEpgChannelExtendedListAjaxResponse {
    resultType?: AjaxResponseTypeEnum;
    errorMessage?: string | undefined;
    data?: EpgChannelExtended[] | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new ApiException(message, status, response, headers, result);
}